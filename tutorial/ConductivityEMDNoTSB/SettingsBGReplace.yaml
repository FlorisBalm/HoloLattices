# This is an example "new style" setup file. Imagine that it is reading all these things into dicts. 
# It interprets numbers as much as it can as numbers (scientific notation needs a .). Yes/no/true/false
# etc get parsed into boolean. For more info, look up the structure of YAML files.
#
# The most important to know is that whitespace IS relevant: 2 spaces make a nesting, spaces 
# after : and - for listing are needed. Multiline objects can be declared with > 
#
# Relevant here is that the way the code is written, each of these can be in separate files or whatever # you want. One file is fine. options that are not applicable are ignored. 
# 
# Important: constants are a bit tricky. It's not possible to put calculations directly into this.
# From the point of view of extensibility therefore you should either:
# - Calculate and write the actual physical parameters that occur in the problems in these constants.
#   This is not always ideal, can can lead to quite a bit of extra work when setting up calculations
# - Preferably: Override the settings class to calculate the relevant physical parameters for the problem.
#   This can be a dataclass with a __post_init__ method defined for example. These are called after
#   __init__ finishes, so it would be ideal for these kind of things. 
# #

EquationOptions:
  grid_sizes: [40]
  # If the spacing is nonuniform periodic, it is necessary to specify
  # the size of each domain in real space. This is so that you are not
  # limited to 0-1 domains.
  grid_domains:
    [1.0]
  grid_spacings: [cheb]
  coordinates: [z]
  grid_periodic: [no]
  diff_order: 4
  max_deriv: 2
  dims: 1
  eom_derivative_methods: ["chebspectral"]
  num_fields: 1
  num_eqs_of_motion: 1
  field_dtype: complex
  field: psi

ConstantOptions:
  constants:
    omega: 0.01
    omegamin: 0.01
    omegamax: 20
    nsteps: 200


BackgroundOptions:
  background_filename: "REPLACE_BG"
  background_field_name : f
  background_dim : 1
  max_bg_deriv: 3

IOOptions:
  coefficient_folder: "./Coefficients/"
  output_file: "Output.h5" # This is typically not used except for when you want to print the whole solution profile
  observables_file: "Observables.yaml"


# Note: It is technically possible to initialize classes directly from yaml files. 
# This is a Bad Ideaâ„¢, it is prone to injection vulnerabilities and does not play
# well with updated versionings. The dataclass approach I am currently using is much
# more robust.
